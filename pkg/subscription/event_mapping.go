package subscription

import (
	"context"

	"github.com/ddelizia/hasura-saas/pkg/gqlsdk"
	"github.com/sirupsen/logrus"
	"github.com/stripe/stripe-go"
)

// Autogenerated by ./cmd/stripe_event_code_generator/main.go

func EventMapping(c context.Context, event stripe.Event, id string, sdkSvc gqlsdk.Service) {
	switch event.Type {
	
	
	case "charge.succeeded":
		ProcessChargeSucceeded(c, event, id, sdkSvc)
	case "customer.created":
		ProcessCustomerCreated(c, event, id, sdkSvc)
	case "customer.subscription.created":
		ProcessCustomerSubscriptionCreated(c, event, id, sdkSvc)
	case "customer.subscription.deleted":
		ProcessCustomerSubscriptionDeleted(c, event, id, sdkSvc)
	case "customer.updated":
		ProcessCustomerUpdated(c, event, id, sdkSvc)
	case "invoice.created":
		ProcessInvoiceCreated(c, event, id, sdkSvc)
	case "invoice.finalized":
		ProcessInvoiceFinalized(c, event, id, sdkSvc)
	case "invoice.paid":
		ProcessInvoicePaid(c, event, id, sdkSvc)
	case "invoice.payment_action_required":
		ProcessInvoicePaymentActionRequired(c, event, id, sdkSvc)
	case "invoice.payment_failed":
		ProcessInvoicePaymentFailed(c, event, id, sdkSvc)
	case "invoice.payment_succeeded":
		ProcessInvoicePaymentSucceeded(c, event, id, sdkSvc)
	case "payment_intent.created":
		ProcessPaymentIntentCreated(c, event, id, sdkSvc)
	case "payment_intent.requires_action":
		ProcessPaymentIntentRequiresAction(c, event, id, sdkSvc)
	case "payment_intent.succeeded":
		ProcessPaymentIntentSucceeded(c, event, id, sdkSvc)
	case "payment_method.attached":
		ProcessPaymentMethodAttached(c, event, id, sdkSvc)
	
	default:
		// unhandled event type
		logrus.WithField("eventType", event.Type).Warn("event not mapped")
	}
}
